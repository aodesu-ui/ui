{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dark/button",
  "type": "registry:ui",
  "title": "Button (dark)",
  "description": "Button component bound to Dark theme variables",
  "dependencies": [
    "class-variance-authority"
  ],
  "registryDependencies": [
    "http://localhost:3000/r/dark.json"
  ],
  "files": [
    {
      "path": "registry/dark/ui/button.tsx",
      "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*=\"size-\"])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-[hsl(var(--primary))] text-[hsl(var(--primary-foreground))]\",\n        secondary:\n          \"bg-[hsl(var(--secondary))] text-[hsl(var(--secondary-foreground))]\",\n        outline:\n          \"border border-[hsl(var(--border))] bg-transparent text-[hsl(var(--foreground))]\",\n        ghost:\n          \"bg-transparent text-[hsl(var(--foreground))] hover:bg-[hsl(var(--accent))]\",\n        destructive:\n          \"bg-[hsl(var(--destructive))] text-[hsl(var(--destructive-foreground))]\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n\n",
      "type": "registry:component",
      "target": "components/dark/button.tsx"
    }
  ]
}